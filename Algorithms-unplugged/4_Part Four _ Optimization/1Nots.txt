// Shortest paths
Q1 : Dynamic programming can achieve the same functionality as Dijkstra's algorithm ? 

    Dijkstra's algorithm is designed for finding the shortest path in weighted graphs,
    efficient when edge weights are non-negative. In contrast,
    dynamic programming is a general optimization technique, breaking problems into subproblems. 
    While dynamic programming can solve some instances of the shortest path problem, 
    Dijkstra's algorithm is more straightforward and efficient for this task.
    Dijkstra's time complexity makes it effective for finding the shortest path in graphs.
    In summary, dynamic programming is versatile for optimization,
    but Dijkstra's algorithm excels in efficiently solving the weighted graph shortest path problem.

// Minimum_spanning_Tree
Q2 : When do we use it instead of Dijkstra's algorithm?      
    generally used  when you want to create a tree that connects all nodes with the minimum possible total edge weight

// Maximum Matching
Q3 : What is Bipartite graph ? 
    A bipartite graph is one where vertices can be split into two distinct groups,
    and edges only connect vertices from different groups.

Q4 : What it Maximum Matching ? 
    Maximum Matching is like finding the largest set of non-overlapping edges in a bipartite graph,
    ensuring the most compatible pairs without conflicts.
    It's a way to optimize pairings efficiently using algorithms.

Q5 : what is the relation between Max Matching and Max flow ? 
    Both Maximum Matching and Maximum Flow involve flow networks, use augmenting paths,
    and share algorithmic techniques for optimizing connectivity or flow through a graph. 

resources : 
    1 : https://www.youtube.com/watch?v=zrGnYstL4ss
    2 : https://www.youtube.com/watch?v=pmMwGyoGlXk

// Online Algorithms
Q6 : What is Online Algorithm ? 
    An online problem refers to a scenario where decisions must be made without knowing the future,
    presenting challenges in making optimal decisions due to incomplete information.
    
Q7 : What is Offline Algorithm ? 
    An offline algorithm is a computational method that operates with complete information about a problem,
    including all inputs and future events.
    It can compute an optimal solution by considering the entire input beforehand.
    Unlike online algorithms,offline algorithms have access to all necessary data and can make decisions based on full knowledge of the problem.

Q8 : What does it mean for an algorithm to be 2-competitive ? 
    An algorithm is considered 2-competitive if, in the context of an online problem,
    its performance guarantees that the total cost incurred by the algorithm is at most twice the cost of an optimal offline solution,
    regardless of the input sequence.
    In other words, the algorithm's cost is competitive with the best possible outcome, even without knowing the future inputs

Q9 : Why is 2-competitive analysis important for making algorithms ?
    it helps us understand how well algorithms perform when we don't know what's going to happen next.
    It's like a measuring stick that tells us if an algorithm is doing a good job even when it doesn't have all the information. 
    It's useful because it helps us design algorithms that work reasonably well in situations where things are uncertain.

