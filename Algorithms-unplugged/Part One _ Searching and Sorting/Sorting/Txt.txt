Q1 : When we use MergeSort and QuickSort ?
    1-Merge Sort:

        Stable sorting, preserving the order of equal elements.
        Predictable O(n log n) time complexity for all cases.
        Higher memory usage due to temporary arrays in merging.

   2- Quick Sort:

        Better average-case performance, especially for random data.
        In-place sorting, advantageous for memory-constrained environments.
        Risk of O(n^2) worst-case time complexity without proper optimization. 

    3-Considerations for Big Data 

        conclusion:  Use Merge Sort for stability and predictable performance with ample memory.
        Choose Quick Sort for efficiency with limited memory and random data.
        Explore hybrid algorithms like TimSort for balanced performance.
        Analyze your specific data and requirements for the best choice.
Q2 : what is Parallel Sorting ? 

    The text talks about a special way to sort things really quickly using special hardware.
    It's like having a super-fast machine that can organize items in a list very fast.

    This method uses something called "comparators," which are like decision-makers that can tell which item is bigger or smaller.
    Imagine you have a bunch of numbers, and you want to sort them. These comparators help you do that.

    The text also mentions "bitonic sorting," which is a way to sort things by making them go up and down or down and up in a special pattern.
    It's like arranging items in a way that helps you sort them quickly.

    One important thing about this method is that it can sort things at the same time, not one by one like some other methods.
    This makes it super fast.

    But there's a trade-off. To use this method, you need a lot of these comparators, which can be challenging to build.
    So, it's like having a very fast car, but you need a lot of expensive parts to make it work.

    In the end, this method is all about balancing speed and complexity when sorting things.
